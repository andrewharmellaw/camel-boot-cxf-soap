// TODO: pull out the spring-boot and camel version numbers into variables

group 'com.capgemini.brahma'
description = """Brahma - A seed-project for spring-boot-cxf-soap apps"""

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://dl.bintray.com/capgeminiuk/maven/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")
        classpath("no.nils:wsdl2java:0.6")
        classpath("org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:3.1.0")
        classpath("org.apache.cxf:cxf-tools:3.1.0")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'no.nils.wsdl2java'

jar {
    baseName = 'camel-boot-cxf-soap'
    version = '0.1.0-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://dl.bintray.com/capgeminiuk/maven/"
    }
}

def springBootVersion = '1.3.1.RELEASE'
def camelVersion = '2.16.2'
//def camelVersion = '2.18-SNAPSHOT'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationtest/java')
        }
        resources.srcDir file('src/integrationtest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

dependencies {
    compile(group: 'org.apache.camel',          name: 'camel-spring-boot',                  version: camelVersion)
    compile(group: 'org.apache.camel',          name: 'camel-cxf',                          version: camelVersion)
    compile(group: 'org.apache.cxf',            name: 'cxf-rt-transports-http-jetty',       version: '3.1.4')
    compile(group: 'org.springframework.boot',  name: 'spring-boot',                        version: springBootVersion)
    compile(group: 'org.springframework.boot',  name: 'spring-boot-starter-web',            version: springBootVersion)
            {
                exclude group: 'ch.qos.logback', module: 'logback-classic'
            }
    compile(group: 'org.springframework.boot',  name: 'spring-boot-starter-jetty',          version: springBootVersion)
    compile(group: 'com.netflix.hystrix',       name: 'hystrix-metrics-event-stream',       version: '1.3.16')
    compile(group: 'com.capgemini',             name: 'codahale-metrics-filters',           version: '0.11.0')
    compile(group: 'com.bealetech',             name: 'metrics-statsd',                     version: '3.0.0-CAPGEMINI')
    compile(group: 'com.capgemini',             name: 'springboot-camel-metrics-publisher', version: '0.12.0')
    compile(group: 'com.capgemini',             name: 'archaius-spring-adapter',            version: '0.10.2')
    compile(group: 'ch.qos.logback',            name: 'logback-access',                     version: '1.1.6')
    compile(group: 'ch.qos.logback',            name: 'logback-classic',                    version: '1.1.6')
    compile(group: 'org.slf4j',                 name: 'slf4j-api',                          version: '1.7.7')
    compile(group: 'com.capgemini',             name: 'jetty-server-request-logger',        version: '0.9.0')
    
    testCompile(group: 'junit',                     name: 'junit',                              version: '4.11')
    testCompile(group: 'com.jayway.restassured',    name: 'rest-assured',                       version: '2.4.1')
    testCompile(group: 'org.apache.camel',          name: 'camel-test-spring',                  version: camelVersion)
    testCompile(group: 'org.springframework.boot',  name: 'spring-boot-starter-test',           version: springBootVersion)
}

configurations {
    compile.exclude(module: 'spring-boot-starter-tomcat')
    compile.exclude(module: 'spring-webmvc')
    compile.exclude(module: 'commons-logging')
}

springBoot {
    mainClass = 'org.apache.camel.spring.boot.FatJarRouter'
}

wsdl2java {
    generatedWsdlDir = file("target/generated-sources/wsdl2java")  // target directory for generated source code
    wsdlDir = file("src/main/resources/META-INF/wsdl") // define to support incremental build
    wsdlsToGenerate = [['src/main/resources/META-INF/wsdl/example.wsdl']]
    cxfVersion = "3.1.0"
}

sourceSets {
    main.java.srcDirs += [file("target/generated-sources/wsdl2java")]
}
